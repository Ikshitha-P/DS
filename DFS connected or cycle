#include <stdio.h>

void dfs(int v, int adj[10][10], int visited[], int stack[], int n);
int hasCycle(int v, int adj[10][10], int visited[], int stack[], int n);
int isConnected(int adj[10][10], int n);

int n, i, j, a[10][10], vis[10], cycleVis[10], stack[10];

int main() {
  
    printf("Enter the number of vertices: ");
    scanf("%d", &n);

    // Input adjacency matrix
    printf("Enter the adjacency matrix (for directed graph):\n");
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            scanf("%d", &a[i][j]);
        }
        vis[i] = 0;
        cycleVis[i] = 0;  
        stack[i] = 0;  
    }

    if (isConnected(a, n)) {
        printf("The graph is connected.\n");
    } else {
        printf("The graph is not connected.\n");
    }

  
    if (hasCycle(0, a, vis, stack, n)) {
        printf("The graph has a cycle.\n");
    } else {
        printf("The graph does not have a cycle.\n");
    }

    return 0;
}


void dfs(int v, int adj[10][10], int visited[], int stack[], int n) {
    visited[v] = 1;
    for (int j = 0; j < n; j++) {
        if (adj[v][j] == 1 && !visited[j]) {
            dfs(j, adj, visited, stack, n);
        }
    }
}


int isConnected(int adj[10][10], int n) {
    int visited[10] = {0};

    
    dfs(0, adj, visited, stack, n);

    for (i = 0; i < n; i++) {
        if (visited[i] == 0) {
            return 0; 
        }
    }

    return 1;  
}


int hasCycle(int v, int adj[10][10], int visited[], int stack[], int n) {
    visited[v] = 1;
    stack[v] = 1;

    
    for (int j = 0; j < n; j++) {
        if (adj[v][j] == 1) {
           
            if (stack[j] == 1) {
                return 1; 
            }
            
            if (visited[j] == 0 && hasCycle(j, adj, visited, stack, n)) {
                return 1;  
            }
        }
    }

   
    stack[v] = 0;
    return 0;  
}
